//binary search
//Collections.sort - O(nlogn)
//arr.subList(n - k, n); - optimal O(logn)
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> lst = new ArrayList<>();
        int len = arr.length;
        if (x <= arr[0]) {//x is not in the range of array, x is small
            for (int i=0;i<k;i++) {
                lst.add(arr[i]);
            }
            Collections.sort(lst);
            return lst;
        }
        if (x >= arr[len-1]) {//x is not in the range of array, x is large
            for (int i=0;i<k;i++) {
                lst.add(arr[len-1-i]);
            }
            Collections.sort(lst);
            return lst;
        }
        int start=0,end = len-1;
        int index = Integer.MAX_VALUE;//store the most closest index
        int min = Integer.MAX_VALUE;//store the minimum difference
        while (start <= end) {
            int mid = (start + end)/2;
            if (arr[mid] == x){
                index = mid;
                break;
            } else if (arr[mid] > x) {
                if (arr[mid]-x < min) {
                    index = mid;
                    min = arr[mid]-x;
                } else if (arr[mid]-x == min) {
                    index = index < mid ? index : mid;
                }
                end = mid - 1;
            } else if (arr[mid] < x) {
                if (x-arr[mid] < min) {
                    index = mid;
                    min = x-arr[mid];
                } else if (x-arr[mid] == min) {
                    index = index < mid ? index : mid;
                }
                start = mid + 1;
            }
        }
        //if duplicates, find the smallest index
        if (index != 0) {
            for (int i=index-1;i<=0;i--){
                if (arr[i] == arr[index]) {
                    index = i;
                } else break;
            }
        }
        lst.add(arr[index]);//already 1, while loop k-1>0
        int diffLeft = Integer.MAX_VALUE, diffRight = Integer.MAX_VALUE;//difference
        int p1 = index - 1, p2 = index + 1;//index
        while (k>1) {//!!!!!!k>1 not k>0
            if (p2 > len-1) {
                lst.add(arr[p1]);
                p1--;
            } else if (p1 < 0) {
                lst.add(arr[p2]);
                p2++;
            } else {
                diffLeft = x-arr[p1];
                diffRight = arr[p2]-x;
                if (diffLeft <= diffRight){
                    lst.add(arr[p1]);
                    p1--;
                } else if (diffLeft > diffRight) {
                    lst.add(arr[p2]);
                    p2++;
                }
            }
            k--;
        }
        Collections.sort(lst);//The result should also be sorted in ascending order.
        return lst;
    }
}
