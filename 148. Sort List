//sort
//Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?
//time complexity: O(nlog(n));space complexity: O(n)
class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) return head;//edge case
        ArrayList<Integer> lst = new ArrayList<>();
        while (head != null) { //store the values of nodes
            lst.add(head.val);
            head = head.next;
        }
        Collections.sort(lst);//O(nlog(n))
        ArrayList<ListNode> nodes = new ArrayList<>();
        for (int num: lst) //convert int to ListNode
            nodes.add(new ListNode(num));
        for (int i=0;i<nodes.size()-1;i++) {
            ListNode tmp = nodes.get(i);
            tmp.next = nodes.get(i+1);
        }
        ListNode last = nodes.get(nodes.size()-1);
        last.next = null;
        return nodes.get(0);
    }
}
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
 
 
 
 
 //merge sort
//Can you sort the linked list in O(n logn) time and O(1) memory?
//time complexity: O(nlog(n));space complexity: O(log(n))
class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) return head;	
        ListNode slow=head, fast=head.next;
        while(fast!=null && fast.next!=null){ //finde the middle node
            slow=slow.next;
            fast=fast.next.next;
        }
        ListNode mid=slow; mid=mid.next; slow.next=null;
		
        ListNode node1=sortList(head), node2=sortList(mid);//recursively sort
		
        return merge(node1,node2);
    }
    private ListNode merge(ListNode node1,ListNode node2){
        if (node1 == null) return node2;
        if (node2 == null) return node1;
        ListNode head, cur;
        if (node1.val < node2.val){
            head=node1;
            cur=node1;
            node1=node1.next;
        }else{
            head=node2;
            cur=node2;
            node2=node2.next;
        }
        while (node1 != null && node2 != null){
            if(node1.val<node2.val){
                cur.next=node1;
                cur=cur.next;
                node1=node1.next;
            }else{
                cur.next=node2;
                cur=cur.next;
                node2=node2.next;
            }
        }
        if (node1 != null) cur.next=node1;
        if (node2 != null) cur.next=node2;
        return head;
    }
}
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
