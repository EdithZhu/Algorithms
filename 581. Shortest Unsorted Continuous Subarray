//1. Then length of the input array is in range [1, 10,000].
//2. The input array may contain duplicates, so ascending order here means <=.
//two pointers
//time complexity: O(n); space complexity: O(1)
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        if (nums.length <=1 || nums == null) return 0;
        int len = nums.length;
        int left = nums[0];
        int right = nums[len-1];
        int start = Integer.MAX_VALUE, end = Integer.MIN_VALUE;
        for (int i=1;i<len;i++) {
            left = Math.max(left, nums[i]);
            right = Math.min(right, nums[len-1-i]);
            if (left > nums[i])
                start = i;
            if (right < nums[len-1-i])
                end = len-1-i;
        }
        if ((start == Integer.MAX_VALUE) && (end == Integer.MIN_VALUE)) return 0;
        else return Math.abs(end - start) + 1;  
    }
}
