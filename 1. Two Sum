//You may assume that each input would have exactly one solution,
//and you may not use the same element twice.
//time complexity: O(n); space complexity:O(n)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        if (nums == null || nums.length <= 1) return null;
        int[] res = new int[2];
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums.length;i++) {
            int diff = target - nums[i];
            if (map.containsKey(diff)){
                res[0] = map.get(diff);
                res[1] = i;
                return res;
            }
            else 
                map.put(nums[i],i);//key:nums[i], value:index
        }
        return null;
    }
}



//You may assume that each input would have exactly one solution,
//and you may not use the same element twice.
//time complexity: O(n*n); space complexity:O(1)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        if (nums == null || nums.length <= 1) return null;
        int[] res = new int[2];
        for(int i=0;i<nums.length - 1;i++) {
            for (int j=i+1;j<nums.length;j++) {
                if (nums[i] + nums[j] == target) {
                    res[0] = i;
                    res[1] = j;
                }
            }
        }
        return res;
    }
}
