//Constraints: 1 <= n <= 45
//Fibonacci Number
//time complexity: O(n); space complexity: O(1)
public class Solution {
    public int climbStairs(int n) {
        if (n == 1) {
            return 1;
        }
        int first = 1;
        int second = 2;
        for (int i = 3; i <= n; i++) {
            int third = first + second;
            first = second;
            second = third;
        }
        return second;
    }
}



//Constraints: 1 <= n <= 45
//dp
//time complexity: O(n); space complexity: O(1)
class Solution {
    public int climbStairs(int n) {
        if (n == 0 || n == 1 || n == 2) return n;
        int[] dp = new int[]{0,1,2};
        for (int i=2;i<n;i++) {
            dp[0] = dp[1];
            dp[1] = dp[2];
            dp[2] = dp[0] + dp[1];//the current step equals to the sum of last 2 steps
        }
        return dp[2];
    }
}
