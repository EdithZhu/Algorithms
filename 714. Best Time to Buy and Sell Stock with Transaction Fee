//method1 - dp
//you must sell the stock before you buy again!!!!
//1.have stock on day i, dp[i][1]
//1.1 buy stock today - dp[i][1] = dp[i-1][0] - prices[i] - fee
//1.2 keep - dp[i][1] = dp[i-1][1]
//2.no stock on day 1, dp[i][0]
//2.1 sell stock today - dp[i][0] = dp[i-1][1] + prices[i]
//2.2 keep = dp[i][0] = dp[i-1][0]
class Solution {
    public int maxProfit(int[] prices, int fee) {
        int len = prices.length;
        int[][] dp = new int[len][2];
        dp[0][0] = 0;//no stock on day 1
        dp[0][1] = - prices[0] - fee;//have on day 1
        for (int i=1;i<len;i++) {
            dp[i][0] = Math.max(dp[i-1][1] + prices[i], dp[i-1][0]);
            dp[i][1] = Math.max(dp[i-1][0] - prices[i] - fee, dp[i-1][1]);
        }
        return Math.max(dp[len-1][0], dp[len-1][1]);
    }
}




//dp
//you must sell the stock before you buy again!!!!
class Solution {
    public int maxProfit(int[] prices, int fee) {
        int deposit = 0;
        int consumption = prices[0];
        for (int price : prices) {
            deposit = Math.max(price-consumption-fee , deposit);
            consumption = Math.min(price - deposit, consumption);
        }
        return deposit;
    }
}
