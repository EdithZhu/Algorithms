//hashmap + priorityqueue + stream
//time complexity: O(nlogk);space complexity: O(n)
class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> map = new HashMap<>();
        for (int num : nums) 
            map.put(num, map.getOrDefault(num,0) + 1);
        PriorityQueue<Integer> queue = new PriorityQueue<Integer> ((o1,o2) -> map.get(o1) - map.get(o2));
        for (int key: map.keySet()) {
            queue.add(key);
            if (queue.size() > k)
                queue.poll();
        }
        
        int[] res = queue.stream().mapToInt(t->t).toArray();
        return res;
    }
}
