//two pointers
//follow-ip: Can you solve it using O(1) (i.e. constant) memory?
//time complexity: O(n);space complexity: O(1)
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if (head == null || head.next == null) return null; //edge case 
        ListNode pointer1 = head, pointer2 = head;
        while (true) {       //check if cycle exists
            if (pointer2 == null || pointer2.next == null) return null;   
            pointer1 = pointer1.next;
            pointer2 = pointer2.next.next;
            if (pointer2 == pointer1) break; 
        }
        pointer2 = head;
        while(pointer1 != pointer2){   //meet at the start of cycle
            pointer1=pointer1.next;
            pointer2=pointer2.next; 
        }
        return pointer2;
    }
}





//set
//time complexity: O(n);space complexity: O(n)
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if (head == null || head.next == null) return null; //edge case 
        Set<ListNode> set = new HashSet<>();
        ListNode tmp = head;
        while (true) {
            if (set.contains(tmp)) return tmp;
            else {
                set.add(tmp);
                tmp = tmp.next;
                if (tmp == null || tmp.next == null) break;
            }
        }
        return null; //no cycle   
    }
}
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
