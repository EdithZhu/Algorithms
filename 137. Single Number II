//method1 - hashmap
//Follow up: Your algorithm should have a linear runtime complexity. 
//Could you implement it without using extra memory?
class Solution {
    public int singleNumber(int[] nums) {
        Map<Integer,Integer> map = new HashMap<>();
        int res = 0;
        for (int num : nums) {
            map.put(num,map.getOrDefault(num,0) + 1);
        }
        for (int key : map.keySet()) {
            if (map.get(key) == 1)
                res = key;
        }
        return res;
    }
}





//reference - method2 - bit manipulation, too hard
//Follow up: Your algorithm should have a linear runtime complexity. 
//Could you implement it without using extra memory?
class Solution {
    public int singleNumber(int[] nums) {
        int[] bits = new int[32];
        for(int i=0; i<nums.length; i++){
            int ref = 1;
            for(int j=31; j>=0; j--){
                if((ref & nums[i])!=0)
                    bits[j] ++;
                ref <<= 1;
            }
        }
        int res = 0;
        for(int i=0; i<=31; i++){
            if(bits[i] % 3 == 1)
                res += 1;
            if(i==31) continue;
            res <<= 1;
        }
        return res;
    }
}

