//time complexity:O(n), space complexity:O(n)
public class Codec {
    public String serialize(TreeNode root) {// Encodes a tree to a single string.
        if (root == null)  return "";
        StringBuffer sb = new StringBuffer();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while (! q.isEmpty()){
            TreeNode tmp = q.poll();
            if (tmp == null) sb.append("N"+ " ");//as compact as possible, "N" instead of "null"
            else{
                sb.append(tmp.val+ " ");
                q.offer(tmp.left);
                q.offer(tmp.right);
            }
        }
        return sb.toString().trim();      
    }
    public TreeNode deserialize(String data) {// Decodes your encoded data to tree.
        if (data == null || data.length() == 0) return null;
        if (data.length() == 1) return new TreeNode(Integer.valueOf(data.trim()));
        String[] nodes = data.trim().split(" ");
        TreeNode[]  Tnodes = new TreeNode[nodes.length];
        TreeNode root = null;
        for (int i=0;i<nodes.length;i++)
            if (! nodes[i].equals("N"))//keep 'null' in the array if "N"
                Tnodes[i] = new TreeNode(Integer.valueOf(nodes[i]));        
        int childIndex = 1;
        for (int i=0;i+3<Tnodes.length;i++) {
            if (Tnodes[i] != null) {
                Tnodes[i].left = Tnodes[childIndex++];
                Tnodes[i].right = Tnodes[childIndex++];
            }
        }
        return Tnodes[0];                      
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
