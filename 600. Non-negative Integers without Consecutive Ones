//reference - bit manipulation
class Solution {
    public int findIntegers(int num) {
        int[] arr = new int[32];
        arr[0] = 1;
        arr[1] = 2;
        for (int i=2;i<arr.length;i++) {
            arr[i] = arr[i-2] + arr[i-1]; 
        }
        int i = 30;
        int sum = 1;;
        int next_bit = 0;
        while (i>=0) {
            if ((num & (1<<i)) != 0) {
                sum = sum + arr[i];
                if (next_bit == 1) {
                    sum--;
                    break;
                }
                next_bit = 1;
            } else {
                next_bit = 0;
            }
            i--;
        } 
        return sum;
    }
}











class Solution {
    public int findIntegers(int num) {
        int res = 0;
        for (int i=0;i<=num;i++) {
            if ( !helper(i) ) res++;
        }
        return res;
    }
    //consecutive ones - true, else false
    private boolean helper(int num) {
        String str = Integer.toBinaryString(new Integer(num));
        int len = str.length();
        if (len <= 1) return false;
        for (int i=1;i<len;i++) {
            if (str.charAt(i-1) == '1' && str.charAt(i) == '1') return true;
        }
        return false;
    }
}



