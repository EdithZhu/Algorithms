class Solution {
    public ListNode partition(ListNode head, int x) {
        if (head == null || head.next == null) return head;
        ListNode res = new ListNode(Integer.MIN_VALUE);
        res.next = head;
        ListNode pointer = res;
        ListNode prev = null;
        ListNode tmp = null;
        boolean flag = false;
        while(pointer != null) {
            if(pointer.val >= x) {
                flag = true;
                prev = pointer;
            } else if (pointer.val < x) {
                if (flag == false || tmp == null) {
                    tmp = pointer;
                    prev = pointer;
                } else {
                    ListNode pNext = pointer.next;
                    ListNode tmpNext = tmp.next;
                    tmp.next = pointer;
                    pointer.next = tmpNext;
                    prev.next = pNext;
                    tmp = pointer;
                }
            }
            pointer = pointer.next;
        }
        return res.next;
    }
}
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
