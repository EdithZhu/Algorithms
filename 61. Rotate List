//math - close the linked list into a ring
//time complexity: ; space complexity: 
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null) return head;
        // close the linked list into the ring
        ListNode oldTail = head;
        int n=1;
        while (oldTail.next != null) {
            oldTail = oldTail.next;
            n++;
        }
        oldTail.next = head;
        // find new tail : (n - k % n - 1)th node
        // and new head : (n - k % n)th node
        ListNode newTail = head;
        for (int i=0;i<n-1-k%n;i++)
            newTail = newTail.next;
        ListNode newHead = newTail.next;
        
        newTail.next = null;
        return newHead;
    }
}
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
