//recursive + check prefix 
class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        int row = board.length;
        int col = board[0].length;
        int maxLen = 0;
        int[][] move = {{0,1},{0,-1},{1,0},{-1,0}};//tracking pattern
        boolean[][] visited = new boolean[row][col];//matrix saving the states
        List<String> res = new ArrayList<>();
        List<String> wordsLst = Arrays.asList(words);//words: convert String[] to List<String>
        for (String word: words)
            maxLen = Math.max(word.length(), maxLen);
        for (int i=0;i<row;i++) {
            for (int j=0;j<col;j++) {
                if (!wordsLst.isEmpty()) {
                    visited[i][j] = true;
                    helper(res, board, wordsLst, visited, maxLen, move, String.valueOf(board[i][j]), i, j);
                    visited[i][j] = false;
                }
            }
        }
        return res; 
    }
    private void helper(List<String> res, char[][] board, List<String> wordsLst, boolean[][] visited, int maxLen, int[][] move, String subStr, int a, int b) {
        if (subStr.length()>maxLen) return;
        if (wordsLst.contains(subStr) && (!res.contains(subStr))) {
            res.add(subStr);
        }
        if (!prefix(wordsLst, subStr)) return; //e.g. "ab", "abc"
        for (int i=0;i<move.length;i++) {
            int rowIdx = a + move[i][0];
            int colIdx = b + move[i][1];
            if (rowIdx>=0 && rowIdx<=board.length-1 && colIdx>=0 && colIdx<=board[0].length-1 && (!visited[rowIdx][colIdx])) {
                visited[rowIdx][colIdx] = true;
                helper(res, board, wordsLst, visited, maxLen, move, subStr+board[rowIdx][colIdx], rowIdx, colIdx);
                visited[rowIdx][colIdx] = false;
            }
        }
    }
    private boolean prefix(List<String> wordsLst, String subStr) {
        for (String word: wordsLst)
            if (word.length() >= subStr.length() && subStr.equals(word.substring(0,subStr.length())))
                return true;
        return false;
    }
}
