//swap
//Requirement: Could you come up with a one-pass algorithm using only O(1) constant space?
//time complexity: O(n); space complexity: O(1)
class Solution {
    public void sortColors(int[] nums) {
        int index = 0;
        int start = 0, end = nums.length-1;
        while (index <= end) {
            if (nums[index] == 2) {
                int tmp = nums[index];
                nums[index] = nums[end];
                nums[end] = tmp;
                end--;
            } else if (nums[index] == 0) {
                int tmp = nums[index];
                nums[index] = nums[start];
                nums[start] = tmp;
                start++;
                index++;//move the pointer!!!
            } else if (nums[index] == 1) 
                index++;
        }        
    }
}






//hashmap
//Requirement: Could you come up with a one-pass algorithm using only O(1) constant space?
//time complexity: O(n); space complexity: O(n)
class Solution {
    public void sortColors(int[] nums) {
        if (nums == null || nums.length <= 1) return nums; //edge case
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums)
            map.put(num,map.getOrDefault(num,0) + 1);
        int index = 0;
        for (int key=0;key<=2;key++) {
            int count = map.getOrDefault(key,0);
            while (count>=1) {
                nums[index] = key;
                count--;
                index++;
            }
        }
    }
}
