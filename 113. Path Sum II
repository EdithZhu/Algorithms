//recursive
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> tmp = new ArrayList<>();
        if (root != null) {
            helper(root, targetSum, res, tmp);
        }
        return res;
    }
    
    private void helper(TreeNode root, int targetSum, List<List<Integer>> res, List<Integer> tmp) {
        tmp.add(root.val);
        int diff = targetSum - root.val;
        if (root.left == null && root.right == null && diff == 0) {
            res.add(new ArrayList<Integer>(tmp));
        }
        if (root.right != null) {
            helper(root.right,diff,res,tmp);
        }
        if (root.left != null) {
            helper(root.left,diff,res,tmp);
        }
        int size = tmp.size();
        tmp.remove(size-1);
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
