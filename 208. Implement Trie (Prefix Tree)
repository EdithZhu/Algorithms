public class Node{
    public Node[] leaves = new Node[26];//define an array to store the leaf nodes
    public char letter;
    boolean isValid;//check if root~this.node is a valid word
    public Node(){};
    public Node(char x) {
        Node node = new Node();
        node.letter = x;
    }  
}
class Trie {
    private Node root;
    /** Initialize your data structure here. */
    public Trie() {
        root = new Node();
        root.letter = ' ';//data type:char
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        Node node = root;
        for (int i=0;i<word.length();i++) {
            char tmp1 = word.charAt(i);
            if (node.leaves[tmp1-'a'] != null)
                node = node.leaves[tmp1-'a'];
            else {//create a new branch
                for (int j=i;j<word.length();j++) {
                    char tmp2 = word.charAt(j);
                    node.leaves[tmp2-'a'] = new Node(tmp2);
                    node = node.leaves[tmp2-'a'];    
                }
                break;//jump out of the loop!!!
            }
        }
        node.isValid = true;//used in .search() method
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Node node  = root;
        for (int i=0;i<word.length();i++) {
            char tmp1 = word.charAt(i);
            if (node.leaves[tmp1 - 'a'] != null) 
                node = node.leaves[tmp1-'a'];
            else return false;
        }
        return node.isValid;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Node node = root;
        for (int i=0;i<prefix.length();i++) {
            char tmp1 = prefix.charAt(i);//'prefix.charAt(i)', not 'word.charAt(i)'
            if (node.leaves[tmp1 - 'a'] != null)
                node = node.leaves[tmp1-'a'];
            else return false;
                
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
