//array
//time complexity: O(m); space complexity: O(1)
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<>();
        if (s.length() == 0 || s == null || s.length() < p.length()) return res;
        int[] arr = new int[26];
        int[] tmp = new int[26];
        for (char cha: p.toCharArray()) //store the pattern of p
            arr[cha - 'a']++;        
        int pointer = 0, slen = s.length(), plen = p.length();
        while (pointer < s.length()) {
            tmp[s.charAt(pointer) - 'a']++;//append the pattern
            if (pointer > plen-1)
                tmp[s.charAt(pointer - plen) - 'a']--;//remove the void element
            if (Arrays.equals(tmp, arr)) 
                res.add(pointer - plen + 1);//starting index: pointer - plen + 1
            pointer++;
        }
        return res;
    }
}
