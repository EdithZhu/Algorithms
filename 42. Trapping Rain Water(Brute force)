class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int ans = 0;
        if (n <= 2) return 0;
        for (int i=1; i<n-1;i++) {
            int l_max = 0;
            int r_max = 0;
            for (int j = i; j >= 0; j--){
                l_max = Math.max(l_max, height[j]);
            }
            for (int k = i; k < n; k++) {
                r_max = Math.max(r_max, height[k]);
            }
            ans = ans + Math.min(l_max,r_max) - height[i];
        }
        return ans;
    }
}
//Approach 1: Brute force
//Time complexity: O(n^2). For each element of array, we iterate the left and right parts.
//Space complexity: O(1) extra space.
