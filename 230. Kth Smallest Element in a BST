//recursive
/* binary search tree!!!
What if the BST is modified (insert/delete operations) often and 
you need to find the kth smallest frequently? How would you optimize the kthSmallest routine? */
//time complexity: O(n);space complexity: O(n)
class Solution {
    private int count;
    private int ans;
    public int kthSmallest(TreeNode root, int k) {
        if (root.left != null) kthSmallest(root.left, k);
        count++;
        if (count == k) ans = root.val;
        if (root.right != null) kthSmallest(root.right, k);
        return ans;
    }
}



//iterative
/* binary search tree!!!
What if the BST is modified (insert/delete operations) often and 
you need to find the kth smallest frequently? How would you optimize the kthSmallest routine? */
//time complexity: O(n);space complexity: O(n)
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        ArrayList<TreeNode> lst = new ArrayList<>();
        while (true) {
            while (root != null) {//add all left node
                lst.add(root);
                root = root.left;
            }
            int size = lst.size();
            if (size == 0) break;//if tree is null
            root = lst.get(size-1);
            lst.remove(size-1);
            k--;
            if (k == 0) return root.val;
            root = root.right;//add right nodes from bottom
        }
        return -1;
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
